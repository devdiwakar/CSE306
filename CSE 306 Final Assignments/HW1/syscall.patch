diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 18b5500ea8bf..4196f36c7689 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -370,7 +370,7 @@
 446	common	landlock_restrict_self	sys_landlock_restrict_self
 447	common	memfd_secret		sys_memfd_secret
 448	common	process_mrelease	sys_process_mrelease
-
+449     64      s2_encrypt              sys_s2_encrypt
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 252243c7783d..451368db6fc5 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -517,6 +517,8 @@ asmlinkage long sys_preadv(unsigned long fd, const struct iovec __user *vec,
 asmlinkage long sys_pwritev(unsigned long fd, const struct iovec __user *vec,
 			    unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
 
+asmlinkage long sys_s2_encrypt(const char __user *user_str, unsigned int k);
+
 /* fs/sendfile.c */
 asmlinkage long sys_sendfile64(int out_fd, int in_fd,
 			       loff_t __user *offset, size_t count);
@@ -1355,6 +1357,8 @@ static inline unsigned int ksys_personality(unsigned int personality)
 	return old;
 }
 
+
+
 /* for __ARCH_WANT_SYS_IPC */
 long ksys_semtimedop(int semid, struct sembuf __user *tsops,
 		     unsigned int nsops,
diff --git a/kernel/Makefile b/kernel/Makefile
index 4df609be42d0..6926fa0c7a7f 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -7,7 +7,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    cpu.o exit.o softirq.o resource.o \
 	    sysctl.o capability.o ptrace.o user.o \
 	    signal.o sys.o umh.o workqueue.o pid.o task_work.o \
-	    extable.o params.o \
+	    extable.o params.o encrypt.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
 	    async.o range.o smpboot.o ucount.o regset.o
diff --git a/kernel/encrypt.c b/kernel/encrypt.c
index e69de29bb2d1..1f86f3063093 100644
--- a/kernel/encrypt.c
+++ b/kernel/encrypt.c
@@ -0,0 +1,34 @@
+#include<linux/kernel.h>
+#include <linux/syscalls.h>
+#include<linux/string.h>
+
+SYSCALL_DEFINE2(s2_encrypt, const char __user *, user_str, unsigned int, k)
+{
+    char *buff;
+    int i;
+    int a;
+    int str_len ;
+    // errornous case if k is not between 1-5 throw an error
+    if((k<1) || (k>5))
+    {
+        return EINVAL;
+    }
+   // string length definition
+    str_len = strnlen_user(user_str, 128);
+    // allocating virtual memory to buff because kernel memory is too small
+    buff = kmalloc( str_len, GFP_KERNEL );
+    // errornous condition if kmalloc fails
+    if (!buff)
+		{return -ENOMEM;}
+    // copying the user string to the heap created. and also handling the erronous case
+    a = copy_from_user(buff, user_str, str_len );
+    if (a)
+    {return -EFAULT;}
+    // loop to encrypt the string stored in buff
+    for(i = 0; i < str_len -1 ; i++)
+{buff[i] = buff[i] + k;}
+    printk("%s\n",buff);
+    // freeing the memory
+    kfree(buff);
+return 0;
+}
